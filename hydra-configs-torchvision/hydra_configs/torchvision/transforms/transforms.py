# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved
#
# Generated by configen, do not edit.
# See https://github.com/facebookresearch/hydra/tree/master/tools/configen
# fmt: off
# isort:skip_file
# flake8: noqa

from dataclasses import dataclass, field
from omegaconf import MISSING
from typing import Any, List


@dataclass
class CenterCropConf:
    _target_: str = "torchvision.transforms.transforms.CenterCrop"
    size: Any = MISSING


@dataclass
class ColorJitterConf:
    _target_: str = "torchvision.transforms.transforms.ColorJitter"
    brightness: Any = 0
    contrast: Any = 0
    saturation: Any = 0
    hue: Any = 0


@dataclass
class ComposeConf:
    _target_: str = "torchvision.transforms.transforms.Compose"
    transforms: Any = MISSING


@dataclass
class ConvertImageDtypeConf:
    _target_: str = "torchvision.transforms.transforms.ConvertImageDtype"
    dtype: Any = MISSING  # dtype


@dataclass
class FiveCropConf:
    _target_: str = "torchvision.transforms.transforms.FiveCrop"
    size: Any = MISSING


@dataclass
class GrayscaleConf:
    _target_: str = "torchvision.transforms.transforms.Grayscale"
    num_output_channels: Any = 1


@dataclass
class LambdaConf:
    _target_: str = "torchvision.transforms.transforms.Lambda"
    lambd: Any = MISSING


@dataclass
class LinearTransformationConf:
    _target_: str = "torchvision.transforms.transforms.LinearTransformation"
    transformation_matrix: Any = MISSING
    mean_vector: Any = MISSING


@dataclass
class NormalizeConf:
    _target_: str = "torchvision.transforms.transforms.Normalize"
    mean: Any = MISSING
    std: Any = MISSING
    inplace: Any = False


@dataclass
class PadConf:
    _target_: str = "torchvision.transforms.transforms.Pad"
    padding: Any = MISSING
    fill: Any = 0
    padding_mode: Any = "constant"


@dataclass
class PILToTensorConf:
    _target_: str = "torchvision.transforms.transforms.PILToTensor"


@dataclass
class RandomAffineConf:
    _target_: str = "torchvision.transforms.transforms.RandomAffine"
    degrees: Any = MISSING
    translate: Any = None
    scale: Any = None
    shear: Any = None
    resample: Any = False
    fillcolor: Any = 0


@dataclass
class RandomApplyConf:
    _target_: str = "torchvision.transforms.transforms.RandomApply"
    transforms: Any = MISSING
    p: Any = 0.5


@dataclass
class RandomChoiceConf:
    _target_: str = "torchvision.transforms.transforms.RandomChoice"
    transforms: Any = None


@dataclass
class RandomCropConf:
    _target_: str = "torchvision.transforms.transforms.RandomCrop"
    size: Any = MISSING
    padding: Any = None
    pad_if_needed: Any = False
    fill: Any = 0
    padding_mode: Any = "constant"


@dataclass
class RandomErasingConf:
    _target_: str = "torchvision.transforms.transforms.RandomErasing"
    p: Any = 0.5
    scale: Any = (0.02, 0.33)
    ratio: Any = (0.3, 3.3)
    value: Any = 0
    inplace: Any = False


@dataclass
class RandomGrayscaleConf:
    _target_: str = "torchvision.transforms.transforms.RandomGrayscale"
    p: Any = 0.1


@dataclass
class RandomHorizontalFlipConf:
    _target_: str = "torchvision.transforms.transforms.RandomHorizontalFlip"
    p: Any = 0.5


@dataclass
class RandomOrderConf:
    _target_: str = "torchvision.transforms.transforms.RandomOrder"
    transforms: Any = MISSING


@dataclass
class RandomPerspectiveConf:
    _target_: str = "torchvision.transforms.transforms.RandomPerspective"
    distortion_scale: Any = 0.5
    p: Any = 0.5
    interpolation: Any = 3
    fill: Any = 0


@dataclass
class RandomResizedCropConf:
    _target_: str = "torchvision.transforms.transforms.RandomResizedCrop"
    size: Any = MISSING
    scale: Any = (0.08, 1.0)
    ratio: Any = (0.75, 1.3333333333333333)
    interpolation: Any = 2


@dataclass
class RandomRotationConf:
    _target_: str = "torchvision.transforms.transforms.RandomRotation"
    degrees: Any = MISSING
    resample: Any = False
    expand: Any = False
    center: Any = None
    fill: Any = None


@dataclass
class RandomTransformsConf:
    _target_: str = "torchvision.transforms.transforms.RandomTransforms"
    transforms: Any = MISSING


@dataclass
class RandomVerticalFlipConf:
    _target_: str = "torchvision.transforms.transforms.RandomVerticalFlip"
    p: Any = 0.5


@dataclass
class ResizeConf:
    _target_: str = "torchvision.transforms.transforms.Resize"
    size: Any = MISSING
    interpolation: Any = 2


@dataclass
class TenCropConf:
    _target_: str = "torchvision.transforms.transforms.TenCrop"
    size: Any = MISSING
    vertical_flip: Any = False


@dataclass
class ToPILImageConf:
    _target_: str = "torchvision.transforms.transforms.ToPILImage"
    mode: Any = None


@dataclass
class ToTensorConf:
    _target_: str = "torchvision.transforms.transforms.ToTensor"
